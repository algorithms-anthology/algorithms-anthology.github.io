I"ê<p>Many problems require us to deal to dense graphs. Iâ€™ll discuss a general technique on how to solve such problems in sub-quadratic time. While this isnâ€™t anything mind-boggling, I find this technique to be extremely useful and surprisingly less-known among competitive programmers.</p>

<p>For whose who donâ€™t know what dense graphs are, they are essentially graphs with $O(n^2)$ edges. The opposite of dense graphs are called sparse graphs, which usually contain $\approx O(n)$ edges. Now, you might be wondering how is it possible to deal with dense graphs in sub-quadratic time while there are already quadratic number of edges. The catch is this technique is only applicable in problems where the edges are not explicitely given, rather we can decide about the edges based on some given condition. Take this for example:</p>

<p>There are $n$ points in Cartesian plane and an integer $d$. The $i$ th point has coordinates $(x_i, y_i)$. There is a edge between point $i$ and point $j$, iff [\mid x_i - x_j \mid + \mid y_i - y_j \mid \leq d]Find out how many connected components are there in this graph.</p>

<p>As you can see, this will be a extremely dense graph ($n \choose 2$ edges in the worse case). However, the edges are not explicitely given, but we can find out the edges based on the given condition. For this, it is an ideal problem to apply our technique. If everything weâ€™ve discussed in satisfied, we can run any algorithm on the graph in sub-quadratic time. Some of this include:</p>

:ET